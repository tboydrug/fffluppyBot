from keep_alive import keep_alive
import subprocess
import boto3
import botocore.exceptions
import disnake
# from disnake import Permissions
import json
from disnake.ext import commands
from disnake.ext import tasks
import twitch 
import sqlite3
import io
import asyncio
from config import ranks_img
from config import rank
from config import gifs
from PIL import Image, ImageDraw, ImageFont
import time
import random
from colormath.color_objects import sRGBColor
#from colormath.color_diff import delta_e_cie1976

guild_id = 1057408057426067526
logs_id = 1111651191919743008 
name_bot = 'fffluppy'
prefix = '/'

start_role = 1090194970050318356
follower_role = 1057413976570462298

client = commands.Bot(command_prefix=prefix, help_command=None, intents=disnake.Intents.all(), test_guilds=[1057408057426067526])

s3 = boto3.client('s3', aws_access_key_id='AKIAVFVCOP3XTVF52O4R', aws_secret_access_key='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')
bucket_name = 'fffluppy-server'



ROLES_TO_CHANGE = [
    {'role_id': 1102249945207160903, 'colors': ['#020202', '#fa0000', '#d38f4c', '#f8fa00', '#4caf2d', '#00ffe9', '#374ac0', '#d666cc']}
]

async def is_valid_sqlite_database():
    try:
        s3.head_object(Bucket=bucket_name, Key='server.db')
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞")
        return True
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
        return False
#    try:
#        s3.download_file(bucket_name, 'server.db', 'server.db')
#        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞')
#        s3_object = io.BytesIO()
#        s3.download_fileobj(bucket_name, 'server.db', s3_object)
#        s3_object.seek(0)
#        connection = sqlite3.connect(':memory:')
#        cursor = connection.cursor()
#        connection.execute("SELECT * FROM sqlite_master")
#        print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞')
#        return True
#    except sqlite3.Error as e:
#        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
#        print(f"–§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite. –û—à–∏–±–∫–∞: {str(e)}")
#        return False
#    finally:
#        if 'connection' in locals():
#            try:
#                connection.close()
#            except NameError:
#                pass

@client.event
async def on_ready():
    print('Bot connected')
    # bot_user = await client.fetch_user(client.user.id)
    # with open('killua.png', 'rb') as f:
    #   avatar = f.read()
    # await client.user.edit(avatar=avatar)

    # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å Amazon S3
    try:
        if is_valid_sqlite_database():
            s3_object = io.BytesIO()
            s3.download_fileobj(bucket_name, 'server.db', s3_object)
            s3_object.seek(0)
            connection = sqlite3.connect(':memory:')
            cursor = connection.cursor()
        else:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –û—à–∏–±–∫–∞: {str(e)}")
            # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∏—Å–∫–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
            connection = sqlite3.connect('server.db')
            cursor = connection.cursor()
            
        cursor.execute("""CREATE TABLE IF NOT EXISTS users(
            name TEXT,
            id INT,
            tw_id TEXT,
            coins INT,
            rep INT,
            rank INT,
            points INT
        )""")
        cursor.execute("""CREATE TABLE IF NOT EXISTS roles(
            role_id INT, 
            role_name TEXT, 
            color TEXT, 
            created_at INT
        )""")
        
        for guild in client.guilds:
            for member in guild.members:
                if member.discriminator is None:
                    username = f"{member.name}#{member.discriminator}"
                else:
                    username = member.name
                if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
                    cursor.execute(
                        "INSERT INTO users (name, id, tw_id, coins, rep, rank, points) VALUES (?, ?, ?, ?, ?, ?, ?)",
                        (username, member.id, 'NULL', 0, 0, 0, 0))
                else:
                    cursor.execute(f"UPDATE users SET name = ? WHERE id = {member.id}", (username,))
                print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
        connection.commit()
    
        cursor.execute("SELECT * FROM users")
        data = cursor.fetchall()
    
        print(f"–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö {data}")
        # –°–æ–∑–¥–∞–µ–º io.BytesIO –æ–±—ä–µ–∫—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        s3_object = io.BytesIO()
    
        output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
        s3_object.write(output.encode('utf-8'))
        # –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç–µ–ª—å —Ñ–∞–π–ª–∞ –≤ –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
        s3_object.seek(0)
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Amazon S3
        s3.upload_fileobj(s3_object, bucket_name, 'server.db')
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
                print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
            except NameError:
                pass

    if is_valid_sqlite_database():
        if remove_expired_roles.is_running():
            remove_expired_roles.cancel()
            print("remove_expired_roles –æ—Ç–º–µ–Ω–µ–Ω–æ")

        try:
            remove_expired_roles.start()
            #change_color.start()
        except NameError:
            pass
    
    guild = client.get_guild(guild_id)

# @client.command()
# @commands.has_permissions(administrator=True)
# # async def send(ctx):
# #     channel = await client.fetch_channel(conf["twitch_reward_channel"])
# #     await ctx.channel.purge(limit=1)
# #     await ctx.send(content="@everyone",
# #         embed=disnake.Embed(
# #             title="–î–æ–±–∞–≤–ª–µ–Ω –º–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π",
# #             description=f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ñ–ª—é–ø–∏–∫–∏ —Å —Ç–≤–∏—á–∞ –≤ –¥–∏—Å–∫–æ—Ä–¥ –∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–∞ –Ω–∏—Ö –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏, –∞ —Ç–∞–∫–∂–µ –≤—ã–¥–µ–ª—è—Ç—å –∏—Ö –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `{prefix}` –≤ –∫–∞–Ω–∞–ª–µ {channel.mention}"
# #     ).add_field(name="", value="—Ñ–ª—é–ø–∏–∫–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏—Å–ª–∏—Ç—å—Å—è –Ω–µ —Å—Ä–∞–∑—É"))


@client.command()
async def test(ctx):
    author = ctx.message.author

    try:
        connection = sqlite3.connect('server.db')
        cursor = connection.cursor()
        cursor.execute("SELECT name FROM users WHERE id = ?", (author.id,))
        result = cursor.fetchone()
    
        if result:
            name = result[0]
            message = f"–ü—Ä–∏–≤–µ—Ç, {name}!"
        else:
            message = "–¢–≤–æ–µ –∏–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass
        
    await ctx.send(message)
  

@tasks.loop(hours=24)
async def change_color():
    await client.wait_until_ready()
    for role_info in ROLES_TO_CHANGE:
        guild = disnake.utils.get(client.guilds, id=guild_id)
        role = disnake.utils.get(guild.roles, id=role_info['role_id'])
        print(role)
        if role:
            colors = role_info['colors']
            current_color = role.color
            print("set color")
            next_color_index = (colors.index(str(current_color))) + 1
            if next_color_index >= len(colors):
                next_color_index = 0
            new_color = disnake.Color(int(colors[next_color_index][1:], 16))
            await role.edit(color=new_color)
            print(f'Changed color of role {role.name} to {new_color}')


@client.slash_command(description="–æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
async def –∫–æ–º–∞–Ω–¥—ã(ctx):
    embed = disnake.Embed(title="–ö–æ–º–∞–Ω–¥—ã")

    embed.add_field(name=f'{prefix}–±–∞–ª–∞–Ω—Å', value='–í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª—é–ø–∏–∫–æ–≤')
    embed.add_field(name=f'{prefix}–º–∞–≥–∞–∑–∏–Ω', value='–î–∞ –º–∞–≥–∞–∑–∏–Ω')

    await ctx.send(embed=embed)


@client.slash_command(description="–ú–∞–≥–∞–∑–∏–Ω –∫—Ç–æ –Ω–µ –ø–æ–Ω—è–ª")
async def –º–∞–≥–∞–∑–∏–Ω(ctx):
    await ctx.channel.purge(limit=1)
    embed1 = disnake.Embed(title="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–æ–ª—å –Ω–∞ –º–µ—Å—è—Ü", description=f"`{prefix}–∫—É–ø–∏—Ç—å_—Ä–æ–ª—å` –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç\nü™ô 5000\n–ü—Ä–∏–º–µ—Ä: `{prefix}–∫—É–ø–∏—Ç—å_—Ä–æ–ª—å` –Ω–µ–≥—Ä 020202")
    embed2 = disnake.Embed(title="–í—ã–¥–µ–ª–∏—Ç—å –≤–∞—à—É —Ä–æ–ª—å", description=f"`{prefix}–≤—ã–¥–µ–ª–∏—Ç—å_—Ä–æ–ª—å` id \nü™ô 5000\n–ü—Ä–∏–º–µ—Ä: `{prefix}–≤—ã–¥–µ–ª–∏—Ç—å_—Ä–æ–ª—å` 1234567890111234567\n \n`–ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏ –ø–æ —Ä–æ–ª–∏, —Å–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —á—Ç–æ–±—ã –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å id (–ù–∞—Å—Ç—Ä–æ–π–∫–∏-> –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)`")
    await ctx.send(embeds=[embed1, embed2])


@client.slash_command(description="–í—ã–≤–æ–¥–∏—Ç –≤–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª—é–ø–∏–∫–æ–≤")
async def –±–∞–ª–∞–Ω—Å(ctx):
    await ctx.channel.purge(limit=1)
    user_id = str(ctx.author.id)

    s3_object = io.BytesIO()
    s3.download_fileobj(bucket_name, 'server.db', s3_object)

    s3_object.seek(0)

    try:
        connection = sqlite3.connect(':memory:')
        cursor = connection.cursor()
    
        cursor.executescript(s3_object.read().decode('utf-8'))
        
        cursor.execute(f"SELECT coins FROM users WHERE id = '{user_id}'")
        result = cursor.fetchone()
    
        embed = disnake.Embed(title="–ë–∞–ª–∞–Ω—Å")
        embed.add_field(name=f"–£ –≤–∞—Å ü™ô {result[0]}", value="\n –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–≤–æ–¥–æ–º —Ñ–ª—é–ø–∏–∫–æ–≤ –Ω–∞ —Ç–≤–∏—á–µ")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass
        
    await ctx.send(embed=embed)


@client.command()
@commands.has_permissions(administrator=True)
async def add_coins(ctx, member: disnake.Member, count: int):
    await ctx.channel.purge(limit=1)
    user_id = str(member.id)

    try:
        connection = sqlite3.connect('server.db')
        cursor = connection.cursor()
        cursor.execute(f"UPDATE users SET coins = coins + '{count}' WHERE id = '{user_id}'")
        connection.commit()
    
        cursor.execute("SELECT * FROM users")
        data = cursor.fetchall()
    
        s3_object = io.BytesIO()
        
        output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
        s3_object.write(output.encode('utf-8'))
    
        s3_object.seek(0)
    
        s3.upload_fileobj(s3_object, bucket_name, 'server.db')
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass
        
    print(f"{ctx.author.mention} –Ω–∞—á–∏—Å–ª–∏–ª {member.mention} {count} —Ñ–ª—é–ø–∏–∫–æ–≤")


async def create_role(guild, role_name, duration, colour):
    if role_name != cursor.execute("SELECT role_name FROM roles WHERE role_name = ?", (role_name,)).fetchone():
        role = await guild.create_role(name=role_name, color=colour)
        print("–†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞")
        created_at = int(time.time())

        try:
            connection = sqlite3.connect('server.db')
            cursor = connection.cursor()
            cursor.execute(f"INSERT INTO roles (role_id, role_name, color, created_at) VALUES ({role.id}, '{role_name}', '{colour}', {created_at + duration})")
            connection.commit()
    
            cursor.execute("SELECT * FROM users")
            data = cursor.fetchall()
    
            s3_object = io.BytesIO()
            
            output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
            s3_object.write(output.encode('utf-8'))
    
            s3_object.seek(0)
    
            s3.upload_fileobj(s3_object, bucket_name, 'server.db')
        
            asyncio.create_task(remove_role(role.id, duration, created_at))
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            if 'connection' in locals():
                try:
                    connection.close()
                except NameError:
                    pass
    else:
        print("–†–æ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


async def remove_role(role_id, duration, created_at):
    await asyncio.sleep(duration)
    guild = disnake.utils.get(client.guilds, id=guild_id)
    role = disnake.utils.get(guild.roles, id=role_id)
    current_time = int(time.time())
    if role and created_at + duration <= current_time:
        await role.delete()

    try:
        connection = sqlite3.connect('server.db')
        cursor = connection.cursor()
        cursor.execute(f"DELETE FROM roles WHERE role_id = {role_id}")
        connection.commit()
    
        cursor.execute("SELECT * FROM users")
        data = cursor.fetchall()
    
        s3_object = io.BytesIO()
        
        output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
        s3_object.write(output.encode('utf-8'))
    
        s3_object.seek(0)
    
        s3.upload_fileobj(s3_object, bucket_name, 'server.db')
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass

@client.slash_command(description="–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def –∫—É–ø–∏—Ç—å_—Ä–æ–ª—å(ctx, name: str, colour: str = '020202'):
    print(f"{ctx.author.name} —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å —Ä–æ–ª—å '{name}' —Å —Ü–≤–µ—Ç–æ–º '{colour}'")
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ —Ü–≤–µ—Ç–∞
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞
        sRGBColor.new_from_rgb_hex(colour)
    except ValueError:
        await ctx.send(f"{ctx.author.mention}, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ HEX, –Ω–∞–ø—Ä–∏–º–µ—Ä: 020202")
        return
      
    # colour_int = int(colour, 16)
    user_id = str(ctx.author.id)
    
    s3_object = io.BytesIO()
    s3.download_fileobj(bucket_name, 'server.db', s3_object)

    s3_object.seek(0)

    try:
        connection = sqlite3.connect(':memory:')
        cursor = connection.cursor()
    
        cursor.executescript(s3_object.read().decode('utf-8'))
        cursor.execute(f"SELECT coins FROM users WHERE id = '{user_id}'")
        balance = cursor.fetchone()[0]
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass

    
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–Ω–µ–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if balance >= 5000:
        # —Å–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
        await create_role(ctx.guild, name, 2592000, disnake.Colour(int(colour, 16)))  # 2592000 - 30 –¥–Ω–µ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        role = disnake.utils.get(ctx.guild.roles, name=name)
        existing_role = disnake.utils.get(ctx.guild.roles, name='–ö–µ—Ä—Ä–∏–Ω–≥ –º–∞—à–∏–Ω–∞')
        if existing_role:
            position = existing_role.position -1
        await role.edit(position=position)
        # –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print("–≤—ã–¥–∞—ë–º —Ä–æ–ª—å —á–µ–ª—É")
        await ctx.author.add_roles(role)
        await ctx.send(f"{ctx.author.mention}, —Ä–æ–ª—å '{name}' —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω–∞ –∑–∞ 5000 –º–æ–Ω–µ—Ç.")
        # –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ–ª–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            connection = sqlite3.connect('server.db')
            cursor = connection.cursor()
            cursor.execute(f"UPDATE users SET coins = coins - 5000 WHERE id = '{user_id}'")
            connection.commit()
    
            cursor.execute("SELECT * FROM users")
            data = cursor.fetchall()
    
            s3_object = io.BytesIO()
            
            output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
            s3_object.write(output.encode('utf-8'))
    
            s3_object.seek(0)
    
            s3.upload_fileobj(s3_object, bucket_name, 'server.db')
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
        finally:
            if 'connection' in locals():
                try:
                    connection.close()
                except NameError:
                    pass
    else:
        await ctx.send(f"{ctx.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ä–æ–ª–∏.")


@client.slash_command(description="–í—ã–¥–µ–ª—è–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—É—é —Ä–∞–Ω–Ω–µ –≤–∞–º–∏ —Ä–æ–ª—å –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞–¥ follower")
async def –≤—ã–¥–µ–ª–∏—Ç—å_—Ä–æ–ª—å(ctx, role_id: str):
    user_id = str(ctx.author.id)
    cursor.execute(f"SELECT coins FROM users WHERE id = '{user_id}'")
    balance = cursor.fetchone()[0]

    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ–Ω–µ–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if balance >= 5000:
        try:
            role_id = int(role_id)
        except ValueError:
            await ctx.send("ID —Ä–æ–ª–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        role = disnake.utils.get(ctx.guild.roles, id=role_id)
        if not role:
            await ctx.send("–†–æ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if cursor.execute(f"SELECT role_id FROM roles WHERE role_id = {role_id}").fetchone() is None:
            await ctx.send("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ —á—Ç–æ–±—ã –ø–æ–¥–Ω—è—Ç—å —ç—Ç—É —Ä–æ–ª—å")
            return

        await role.edit(hoist=True)

        # –≤—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ä–æ–ª–∏ –∏–∑ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(f"UPDATE users SET coins = coins - 5000 WHERE id = '{user_id}'")

        await ctx.send(f"{ctx.author.mention}, —Ä–æ–ª—å '{role.name}' —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–µ–ª–µ–Ω–∞ –∑–∞ 5000 —Ñ–ª—é–ø–∏–∫–æ–≤.")
    else:
        await ctx.send(f"{ctx.author.mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–ª—é–ø–∏–∫–æ–≤.")


@tasks.loop(hours=24)
async def remove_expired_roles():
    print("remove role check")
    now = int(time.time())
    
    s3_object = io.BytesIO()
    s3.download_fileobj(bucket_name, 'server.db', s3_object)

    s3_object.seek(0)

    expired_roles = []
    
    try:
        connection = sqlite3.connect(':memory:')
        cursor = connection.cursor()
    
        cursor.executescript(s3_object.read().decode('utf-8'))
        
        cursor.execute("SELECT role_id, role_name, created_at FROM roles")
        expired_roles = cursor.fetchall()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass
                
    for expired_role in expired_roles:
        print("check role")
        role_id = expired_role[0]
        role_name = expired_role[1]
        created_at = expired_role[2]
        guild = disnake.utils.get(client.guilds, id=guild_id)
        role = disnake.utils.get(guild.roles, id=role_id)
        if role and created_at < now:
            channel = client.get_channel(logs_id)
            await role.delete()
            
            try:
                connection = sqlite3.connect('server.db')
                cursor = connection.cursor()
                cursor.execute(f"DELETE FROM roles WHERE role_id = {role_id}")
                connection.commit()
    
                cursor.execute("SELECT * FROM users")
                data = cursor.fetchall()
    
                s3_object = io.BytesIO()
    
                output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
                s3_object.write(output.encode('utf-8'))
    
                s3_object.seek(0)
    
                s3.upload_fileobj(s3_object, bucket_name, 'server.db')
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
            finally:
                if 'connection' in locals():
                    try:
                        connection.close()
                    except NameError:
                        pass
            
            await channel.send(f"Role '{role_name}' deleted")


@client.event
async def on_button_click(interaction: disnake.MessageInteraction):
    if interaction.component.custom_id.startswith('role_button_'):
        role_id = int(interaction.component.custom_id.split('_')[2])
        role = disnake.utils.get(interaction.guild.roles, id=role_id)
        if role is not None:
            if role in interaction.author.roles:
                await interaction.author.remove_roles(role)
            else:
                await interaction.author.add_roles(role)


@client.command()
@commands.has_permissions(administrator=True)
async def role_button(ctx, role_id: int):
    await ctx.channel.purge(limit=1)
    role = disnake.utils.get(ctx.guild.roles, id=role_id)
    if role is not None:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–Ω–æ–ø–∫–∏
        button = disnake.ui.Button(style=disnake.ButtonStyle.green, label='–ù–ê–ñ–ú–ò –ù–ê –ú–ï–ù–Ø', custom_id=f'role_button_{role_id}')
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        message = await ctx.send(
        embed=disnake.Embed(
        title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç—Ä–∏–º–∞—Ö",
        description=f"{role.mention}\n –£–∑–Ω–∞–≤–∞–π –ø–µ—Ä–≤—ã–º –∫–æ–≥–¥–∞ –Ω–∞—á–∞–ª—Å—è —Å—Ç—Ä–∏–º!",
        color=0x2F3136,)\
            .set_thumbnail("https://i.ibb.co/8BpPZC8/fc87a8e1-20fd-4ca0-85de-474117cd1adb-profile-image-70x70-round-2.png"), components=[disnake.ui.ActionRow(button)])
    #else:
        # message = await ctx.send('–¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')


@client.event
async def on_message_delete(message):
    channel = client.get_channel(logs_id)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    await channel.send(f"id: ```{message.author.mention}```\nName: {message.author.mention}\nDeleted message: ```{message.content}```\n")


@client.event
async def on_message_edit(before, after):
    channel = client.get_channel(logs_id)
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    await channel.send(f"id: ```{before.author.mention}```\nName: {before.author.mention}\n```Before: {before.content}\nAfter: {after.content}```\n")


@client.event
# Update members roles / Twitch Notification
async def on_member_update(before, after):
    # before_username = f"{before.name}#{before.discriminator}"
    if after.discriminator is not None:
        after_username = f"{after.name}#{after.discriminator}"
    else:
        after_username = after.name
    role_to_remove = disnake.utils.get(after.guild.roles, name="unknown")

    after_without_roles = [role for role in after.roles if role != after.guild.default_role]
    if not after_without_roles:
        await after.add_roles(role_to_remove)
    else:
        before_with_role_to_remove = [role for role in before.roles if role == role_to_remove]
        if role_to_remove in before_with_role_to_remove:
            await after.remove_roles(role_to_remove)
            
    s3_object = io.BytesIO()
    s3.download_fileobj(bucket_name, 'server.db', s3_object)

    s3_object.seek(0)
    try:
        connection = sqlite3.connect(':memory:')
        cursor = connection.cursor()
    
        cursor.executescript(s3_object.read().decode('utf-8'))
        
        before_name = cursor.execute(f"SELECT name FROM users WHERE id = {before.id}").fetchone()
        if before_name != after_username:
            if cursor.execute(f"SELECT id FROM users WHERE id = {before.id}").fetchone():
                cursor.execute("UPDATE users SET name = ? WHERE id = ?", (after_username, before.id))
                print(f"{before_name} –∏–∑–º–µ–Ω–∏–ª –∏–º—è –Ω–∞ {after.name}")
                connection.commit()
    
                cursor.execute("SELECT * FROM users")
                data = cursor.fetchall()
    
                s3_object = io.BytesIO()
                
                output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
                s3_object.write(output.encode('utf-8'))
    
                s3_object.seek(0)
    
                s3.upload_fileobj(s3_object, bucket_name, 'server.db')
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass

@client.event
async def on_member_join(member):
    if member.discriminator is not None:
        username = f"{member.name}#{member.discriminator}"
    else:
        username = member.name
        
    s3_object = io.BytesIO()
    s3.download_fileobj(bucket_name, 'server.db', s3_object)

    s3_object.seek(0)
    
    try:
        connection = sqlite3.connect(':memory:')
        cursor = connection.cursor()
    
        cursor.executescript(s3_object.read().decode('utf-8'))
        
        if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
            cursor.execute("INSERT INTO users (name, id, tw_id, coins, rep, rank, points) VALUES (?, ?, ?, ?, ?, ?, ?)", (username, member.id, 'NULL', 0, 0, 0, 0))
        else:
            pass
    
        connection.commit()
    
        cursor.execute("SELECT * FROM users")
        data = cursor.fetchall()
    
        s3_object = io.BytesIO()
        
        output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
        s3_object.write(output.encode('utf-8'))
    
        s3_object.seek(0)
    
        s3.upload_fileobj(s3_object, bucket_name, 'server.db')
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if 'connection' in locals():
            try:
                connection.close()
            except NameError:
                pass

    role = disnake.utils.get(member.guild.roles, id=1090194970050318356)

    await member.add_roles(role)


@client.command()
@commands.has_permissions(administrator=True)
# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
async def profile(ctx):
    await ctx.channel.purge(limit=1)
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img = Image.open('image.png').convert('RGBA')
    rank_img = Image.open(ranks_img[cursor.execute("SELECT rank FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    draw = ImageDraw.Draw(img)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–∞
    # default_font = ImageFont.truetype("./fonts/ARIAL.TTF", size=30)
    font = ImageFont.truetype("./fonts/Decrypted.ttf", size=46)
    font2 = ImageFont.truetype("./fonts/Decrypted.ttf", size=30)

    # Twitch name
    text = f"""{cursor.execute("SELECT tw_id FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]}"""
    # Name
    text1 = f"{ctx.author.name}"
    # Level
    text2 = f"""RANK: {rank[cursor.execute("SELECT rank FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]]}"""
    # experience
    text3 = f"""POINTS: {cursor.execute("SELECT points FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]}"""
    # reputation
    text4 = f"""REP: {cursor.execute("SELECT rep FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]}"""
    # balance
    text5 = f"""FLUPYCOIN: {cursor.execute("SELECT coins FROM users WHERE id = {}".format(ctx.author.id)).fetchone()[0]}"""

    # Draw text TW_NAME
    text_width, text_height = draw.textsize(text1, font=font)
    draw.text(((img.width - text_width) // 2, img.height - text_height - 200), text, font=font, fill=(0, 0, 0))
    # Draw text NAME
    text_width, text_height = draw.textsize(text1, font=font)
    draw.text(((img.width - text_width) // 2, img.height - text_height - 145), text1, font=font, fill=(0, 0, 0))
    # Draw text RANK
    draw.text((35, 325), text2, font=font2, fill=(0, 0, 0))
    # Paste image RANK
    img.paste(rank_img, (250, 325), mask=rank_img.split()[3])
    # Draw text POINTS
    draw.multiline_text((35, 340), text3, font=font2, fill=(0, 0, 0))
    # Draw text REP
    draw.text((35, 400), text4, font=font2, fill=(0, 0, 0))
    # Draw text FLUPYCOIN
    draw.multiline_text((160, 400), text5, font=font2, fill=(0, 0, 0))

    # –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏
    img_buffer = io.BytesIO()
    img.save(img_buffer, format='PNG')
    img_buffer.seek(0)

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    file = disnake.File(img_buffer, filename='image.png')
    await ctx.send(file=file)


@client.command()
@commands.has_permissions(administrator=True)
# Clear messages
async def clear(ctx, amount=1):
    await ctx.channel.purge(limit=amount)


@client.slash_command(description="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥")
async def –ø–µ—Ä–µ–≤–æ–¥(ctx):
    channel = await client.fetch_channel(conf["twitch_reward_channel"])
    rewards = twitch.get_redemption_reward()
    guild = client.get_guild(guild_id)

    if channel is not None and bool(rewards):
        for reward in rewards['data']:

            s3_object = io.BytesIO()
            s3.download_fileobj(bucket_name, 'server.db', s3_object)

            s3_object.seek(0)
            try:
                connection = sqlite3.connect(':memory:')
                cursor = connection.cursor()
    
                cursor.executescript(s3_object.read().decode('utf-8'))
    
                if cursor.execute(f"SELECT id FROM users WHERE name = '{reward['user_input']}'").fetchone():
                    status = "FULFILLED"
                    cursor.execute(f"UPDATE users SET coins = coins + {reward['reward']['cost']} WHERE name = '{reward['user_input']}'")
                    connection.commit()
    
                    cursor.execute("SELECT * FROM users")
                    data = cursor.fetchall()
    
                    s3_object = io.BytesIO()
                    
                    output = subprocess.check_output(['sqlite3', 'server.db', '.dump'], text=True)
                    s3_object.write(output.encode('utf-8'))
    
                    s3_object.seek(0)
    
                    s3.upload_fileobj(s3_object, bucket_name, 'server.db')
                    
                    twitch.update_redemption_status(reward['id'], status)
                    member = guild.get_member_named(reward['user_input'])
                    await channel.send(f"{reward['user_login']} –ø–µ—Ä–µ–≤—ë–ª —Ñ–ª—é–ø–∏–∫–∏ {member.mention}")
                else:
                    status = "CANCELED"
                    twitch.update_redemption_status(reward['id'], status)
                    await ctx.send("–≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                    print({reward['user_input']})
                
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û—à–∏–±–∫–∞: {str(e)}")
            finally:
                if 'connection' in locals():
                    try:
                        connection.close()
                    except NameError:
                        pass

    else:
        await ctx.send(f"–ö–∞–Ω–∞–ª —Å ID {channel} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥.")


@client.event
async def on_message(message):
    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª –Ω–∞ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö —Ü–∏–∫–ª–æ–≤
    if message.author == client.user:
        return

    # –ü–æ–ª—É—á–∏—Ç–µ –æ–±—ä–µ–∫—Ç —Å–µ—Ä–≤–µ—Ä–∞
    server = message.guild

    # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —Å–µ—Ä–≤–µ—Ä–∞
    if message.author == server.owner or message.author.id == 507991914327310337:
        if 'https://www.twitch.tv/fffluppy' in message.content.lower():
            await message.delete(),
            await stream(message)

    # –ü–æ–ª–µ–∑–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –±–æ—Ç–∞ –∑–¥–µ—Å—å

    await client.process_commands(message)


# Twitch
async def stream(message):
  
    #channel = client.get_channel(conf["twitch_notification_channel"])

    print("Check stream")
    notifications = twitch.get_notifications()
          
    if bool(notifications):
        message_sent = await message.channel.send(
            content="@everyone",
            embed=disnake.Embed(
                title="–°–ú–û–¢–†–ï–¢–¨ –°–¢–†–ò–ú",
                description=notifications[0]['fffluppy']['title'],
                colour=0x6441A4,
                url='https://www.twitch.tv/fffluppy') \
                .set_thumbnail(
                url='https://i.ibb.co/8BpPZC8/fc87a8e1-20fd-4ca0-85de-474117cd1adb-profile-image-70x70-round-2.png') \
                .set_image(random.choice(gifs)) \
                .add_field(name=f"\üéÆ {notifications[0]['fffluppy']['game_name']}", value="", inline=True) \
                .add_field(name=f"\üî¥ {notifications[0]['fffluppy']['viewer_count']}", value="", inline=True) \
                .add_field(name=f"\‚ù§Ô∏è {notifications[0]['total']}", value="", inline=False) \
                .add_field(name=f"\üïô {notifications[0]['formatted_date']}", value="", inline=False))

        if message_sent:
            activity = disnake.Activity(
                type=disnake.ActivityType.streaming,
                name='fffluppy',
                url='https://www.twitch.tv/fffluppy',
                game=notifications[0]['fffluppy']['game_name']
            )
            await client.change_presence(activity=activity)
      
    else:
        activity = disnake.Activity(
          type=disnake.ActivityType.playing,
          name=f'{prefix}–∫–æ–º–∞–Ω–¥—ã'
        )
        await client.change_presence(activity=activity)
        await message.channel.send("fffluppy –æ—Ñ–ª–∞–π–Ω")
        

with open("conf.json") as conf_file:
    conf = json.load(conf_file)

  
if __name__ == "__main__":
    keep_alive()
    client.run(conf["discord_token"])
